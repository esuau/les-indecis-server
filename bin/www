#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('les-indecis-server:server');
var http = require('http');

const cron = require('node-cron');
const request = require('request');

const helper = require('../util/helper');
const config = helper.readConfig('./conf/config.json');
const pg = require('pg');
const pool = new pg.Pool({
  user: config.psql.user,
  host: config.psql.host,
  database: config.psql.database,
  password: config.psql.password,
  port: config.psql.port
});

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


cron.schedule('* * * * *', () => {
  request('http://api.undefined.inside.esiag.info/get_msg?queue=test', { json: false }, (err, res, body) => {
    if (err) { return console.log(err); }
    console.log(body);
    if (body.content != undefined) {
      var msg = body.content.data.toString();
      pool.query("SELECT MAX(ID) AS mid FROM notification;", (err, r) => {
        if (err) {
          res.status(500).json({message: 'Error while reading id from DB : ' + err});
        } else {
          var id = r.rows[0].mid + 1;
          pool.query("INSERT INTO notification VALUES (" + id + ", '" + msg + "', NOW(), '" + planned_at + "', '##') ;", (err, r) => {
            if (err) {
              res.status(500).json({message: 'Error while adding notification in DB : ' + err});
            } else {
              res.send('Notification ajoutée avec succés !');
            }
          });
        }
      });
    };
  });
});

cron.schedule('* * * * *', () => {
  var today = new Date(Date.now()).toLocaleString();
  while (today.indexOf('/') != -1) {
    today = today.replace('/', '-');
  }
  today = today.split(' ')[0];
  var tab = today.split('-');
  today = '' + tab[2] + '-' + tab[1] + '-' + tab[0];

  pool.query("SELECT * FROM notification WHERE planned_at::text LIKE '" + today + "%' ;", (err, r) => {
    if (err) {
      console.error('Error while reading id from DB : ' + err);
    }
  });
});
